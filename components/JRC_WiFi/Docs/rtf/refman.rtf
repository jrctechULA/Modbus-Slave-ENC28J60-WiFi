{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment JRC WiFi Library  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
V1.0 \par
}}JRC WiFi Library}
{\comment Generated by doxygen 1.9.6.}
{\creatim \yr2023\mo3\dy11\hr20\min6\sec28}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt JRC WiFi Library}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version V1.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Sat Mar 11 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b JRC_WiFi.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b JRC_WiFi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b secrets.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
JRC_WiFi.c File Reference\par \pard\plain 
{\tc\tcl2 \v JRC_WiFi.c}
{\xe \v JRC_WiFi.c}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "JRC_WiFi.h"}\par
{\f2 #include <string.h>}\par
{\f2 #include "esp_system.h"}\par
{\f2 #include "esp_wifi.h"}\par
{\f2 #include "esp_mac.h"}\par
{\f2 #include "esp_event.h"}\par
{\f2 #include "esp_log.h"}\par
{\f2 #include "nvs_flash.h"}\par
{\f2 #include "lwip/err.h"}\par
{\f2 #include "lwip/sys.h"}\par
{\f2 #include "secrets.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These functions perfom the task needed to establish connection to the AP : }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_AP_Info} (wifi_ap_record_t *apinfo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the information of the AP the device has been connected: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_MAC_Address} (char *mac)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the MAC Address of the ESP32 in Station Mode : It works printing MAC address in the serial console (pass {\f2 NULL}  as parameter), or saving the MAC address in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_IP_Address} (char *ipAdd)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the IP address assigned to the ESP32 by the AP : Prints the IP address to the console, (pass {\f2 NULL}  as parameter), or saving the IP address in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_Subnet_Mask} (char *snMask)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Subnet Mask in Station Mode : Prints the Subnet Mask to the console, (pass {\f2 NULL}  as parameter), or saving the Subnet Mask in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_Gateway} (char *gateWay)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Gateway in Station Mode : Prints the Gateway to the console, (pass {\f2 NULL}  as parameter), or saving the Gateway in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b JRC_WiFi_Status_t} {\b JRC_WiFi_Get_Status} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the status of the WiFi: The status is a typedef, that is coded in macros, and can be one of the following: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Stop} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect from AP in Station Mode, stops WiFi driver and free resources: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin_AP} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the WiFi device as an AP in SoftAP Mode: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin_STA_AP} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Scan} (void *ap_found_info)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Perform a scan for available AP's: It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the array passed as a parameter. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b JRC_WiFi_Status_t} {\b WiFi_Status} = {\b JRC_WIFI_NOT_STARTED}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v JRC_WiFi_AP_Info\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_AP_Info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_AP_Info (wifi_ap_record_t *  {\i apinfo})}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the information of the AP the device has been connected: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the structure passed as a parameter.\par
Call of function requires a pointer to a {\f2 wifi_ap_record_t}  struct. ie: {\f2 JRC_WiFi_AP_Info(&ap_info);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i apinfo} \cell }{Pointer to a struct declared as {\f2 wifi_ap_record_t} . ie: {\f2 wifi_ap_record_t ap_info;}  If this parameter is {\f2 NULL} , the output result will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 131} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin ()}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These functions perfom the task needed to establish connection to the AP : }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b JRC_WiFi_Begin()}; sets up the device in Station Mode, The {\b JRC_WiFi_Begin_STA_AP()}; sets up the device in Station + SoftAP Mode.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The SSID and PASSWORD for the Station Mode and for the SoftAP Mode, are configured in the file {\b secrets.h}, under the corresponding macros.\par
If the macros {\f2 JRC_WIFI_STA_CUSTOM_MAC}  and/or {\f2 JRC_WIFI_AP_CUSTOM_MAC}  are defined, custom mac addresses will be used, if these macros are not defined, the factory mac addresses will be used instead. Edit the {\b secrets.h} file for the desired custom macs, or comment the macro definitions if custom macs are not desired.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 81} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin_AP\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Begin_AP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin_AP ()}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the WiFi device as an AP in SoftAP Mode: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The SSID and PASSWORD for the Station Mode and for the SoftAP Mode, are configured in the file {\b secrets.h}, under the corresponding macros.\par
If the macro {\f2 JRC_WIFI_AP_CUSTOM_MAC}  is defined, custom mac address will be used, if this macro is not defined, the factory AP mac address will be used instead. Edit the {\b secrets.h} file for the desired custom mac, or comment the macro definition if custom mac is not desired.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 282} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin_STA_AP\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Begin_STA_AP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin_STA_AP ()}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 343} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Get_Status\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Get_Status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b JRC_WiFi_Status_t} JRC_WiFi_Get_Status ()}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the status of the WiFi: The status is a typedef, that is coded in macros, and can be one of the following: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   `JRC_WIFI_NOT_STARTED`\par
  `JRC_WIFI_CONNECTED` \par
  `JRC_WIFI_STARTED` \par
  `JRC_WIFI_GOT_IP` \par
  `JRC_WIFI_DISCONNECTED` \par
}
 \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 254} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Scan\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Scan}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Scan (void *  {\i ap_found_info})}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Perform a scan for available AP's: It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ap_found_info} \cell }{array name declared as {\f2 wifi_ap_record_t} .\cell }
{\row }
}
ie: {\f2 wifi_ap_record_t ap_info[DEFAULT_SCAN_LIST_SIZE];}  {\f2 JRC_WiFi_Scan(ap_info);} \par
If this parameter is {\f2 NULL} , the output result will be printed in the serial console.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 509} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_Gateway\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_STA_Gateway}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_Gateway (char *  {\i gateWay})}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Gateway in Station Mode : Prints the Gateway to the console, (pass {\f2 NULL}  as parameter), or saving the Gateway in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char gateWay[IP_ADDR_LENGTH];}  JRC_ {\f2 WiFi_STA_Gateway(gateWay);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gateWay} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the Gateway will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 227} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_IP_Address\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_STA_IP_Address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_IP_Address (char *  {\i ipAdd})}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the IP address assigned to the ESP32 by the AP : Prints the IP address to the console, (pass {\f2 NULL}  as parameter), or saving the IP address in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char ipAdd[IP_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_IP_Address(ipAdd);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ipAdd} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the IP address will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 173} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_MAC_Address\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_STA_MAC_Address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_MAC_Address (char *  {\i mac})}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the MAC Address of the ESP32 in Station Mode : It works printing MAC address in the serial console (pass {\f2 NULL}  as parameter), or saving the MAC address in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 18 bytes at minimum. Use the macro: {\f2 MAC_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char macAddress[MAC_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_MAC_Address(macAddress);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mac} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the MAC address will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 154} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_Subnet_Mask\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_STA_Subnet_Mask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_Subnet_Mask (char *  {\i snMask})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Subnet Mask in Station Mode : Prints the Subnet Mask to the console, (pass {\f2 NULL}  as parameter), or saving the Subnet Mask in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char snMask[IP_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_Subnet_Mask(snMask);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i snMask} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the Subnet Mask will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 200} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Stop\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:JRC_WiFi_Stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Stop ()}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect from AP in Station Mode, stops WiFi driver and free resources: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  on success \par
}}}{
Definition at line {\b 259} of file {\b JRC_WiFi.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v WiFi_Status\:JRC_WiFi.c}
{\xe \v JRC_WiFi.c\:WiFi_Status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b JRC_WiFi_Status_t} WiFi_Status = {\b JRC_WIFI_NOT_STARTED}}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b JRC_WiFi.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
JRC_WiFi.c\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20 ______________________________________________________________________________________}\par
00003 {\cf20                                 JRC_WiFi Library V1.0}\par
00004 {\cf20                                 by:  Javier Ruzzante C}\par
00005 {\cf20                                    (March 2023)}\par
00006 {\cf20 ______________________________________________________________________________________}\par
00007 {\cf20 */}\par
00008 \par
00009 {\cf20 /*}\par
00010 {\cf20     Source file: Contains the library function implementations.}\par
00011 {\cf20 }\par
00012 {\cf20     See the JRC_WiFi.h or the documentation file for reference.}\par
00013 {\cf20 */}\par
00014 \par
00015 {\cf21 #include "JRC_WiFi.h"}\par
00016 {\cf21 #include <string.h>}\par
00017 {\cf21 #include "esp_system.h"}\par
00018 {\cf21 #include "esp_wifi.h"}\par
00019 {\cf21 #include "esp_mac.h"}\par
00020 {\cf21 #include "esp_event.h"}\par
00021 {\cf21 #include "esp_log.h"}\par
00022 {\cf21 #include "nvs_flash.h"}\par
00023 {\cf21 #include "lwip/err.h"}\par
00024 {\cf21 #include "lwip/sys.h"}\par
00025 {\cf21 #include "secrets.h"}\par
00026 \par
00027 {\cf17 static} {\cf17 const} {\cf18 char} *TAG = {\cf22 "JRC_WiFi"};\par
00028 \par
00029 JRC_WiFi_Status_t WiFi_Status = JRC_WIFI_NOT_STARTED;\par
00030 \par
00031 {\cf17 static} {\cf18 void} wifi_event_handler({\cf18 void} *arg, esp_event_base_t event_base, int32_t event_id, {\cf18 void} *event_data)\par
00032 \{\par
00033     {\cf19 switch} (event_id)\par
00034     \{\par
00035     {\cf19 case} WIFI_EVENT_STA_START:\par
00036         WiFi_Status = JRC_WIFI_STARTED;\par
00037         ESP_LOGI(TAG, {\cf22 "Connecting to AP..."});\par
00038         esp_wifi_connect();\par
00039         {\cf19 break};\par
00040     {\cf19 case} WIFI_EVENT_STA_CONNECTED:\par
00041         WiFi_Status = JRC_WIFI_CONNECTED;\par
00042         ESP_LOGI(TAG, {\cf22 "Connected to AP"});\par
00043         {\cf19 break};\par
00044     {\cf19 case} IP_EVENT_STA_GOT_IP:\par
00045         WiFi_Status = JRC_WIFI_GOT_IP;\par
00046         ESP_LOGI(TAG, {\cf22 "Got IP address"});\par
00047         {\cf19 break};\par
00048     {\cf19 case} WIFI_EVENT_STA_DISCONNECTED:\par
00049         WiFi_Status = JRC_WIFI_DISCONNECTED;\par
00050         ESP_LOGI(TAG, {\cf22 "Disconnected from AP"});\par
00051         esp_wifi_connect();\par
00052         {\cf19 break};\par
00053 \par
00054     {\cf19 case} WIFI_EVENT_AP_START:\par
00055         WiFi_Status = JRC_WIFI_AP_STARTED;\par
00056         ESP_LOGI(TAG, {\cf22 "WIFI_EVENT_AP_START"});\par
00057         {\cf19 break};\par
00058     {\cf19 case} WIFI_EVENT_AP_STADISCONNECTED:\par
00059     \{\par
00060         ESP_LOGI(TAG, {\cf22 "WIFI_EVENT_AP_STADISCONNECTED"});\par
00061         wifi_event_ap_stadisconnected_t *{\cf17 event} = (wifi_event_ap_stadisconnected_t *)event_data;\par
00062         ESP_LOGI(TAG, {\cf22 "station "} MACSTR {\cf22 " leave, AID=%d"},\par
00063                  MAC2STR(event->mac), event->aid);\par
00064     \}\par
00065     {\cf19 break};\par
00066     {\cf19 case} WIFI_EVENT_AP_STACONNECTED:\par
00067     \{\par
00068         ESP_LOGI(TAG, {\cf22 "WIFI_EVENT_AP_STACONNECTED"});\par
00069         wifi_event_ap_staconnected_t *{\cf17 event} = (wifi_event_ap_staconnected_t *)event_data;\par
00070         ESP_LOGI(TAG, {\cf22 "station "} MACSTR {\cf22 " join, AID=%d"},\par
00071                  MAC2STR(event->mac), event->aid);\par
00072     \}\par
00073     {\cf19 break};\par
00074     {\cf19 default}:\par
00075         {\cf19 break};\par
00076     \}\par
00077 \}\par
00078 \par
00079 \par
00080 \par
00081 esp_err_t JRC_WiFi_Begin()\par
00082 \{\par
00083     nvs_flash_init();\par
00084 \par
00085     {\cf19 if} (JRC_WiFi_Get_Status() != JRC_WIFI_NOT_STARTED)\par
00086     \{\par
00087         ESP_LOGW(TAG, {\cf22 "Stop previously initialized WiFi..."});\par
00088         JRC_WiFi_Stop();\par
00089         ESP_LOGW(TAG, {\cf22 "WiFi stopped. Init again..."});\par
00090     \}\par
00091 \par
00092 \par
00093     {\cf20 // Stage 1. Wi-Fi/LwIP Init Phase:}\par
00094 \par
00095      esp_netif_init();\par
00096      esp_event_loop_create_default();\par
00097      esp_netif_create_default_wifi_sta();\par
00098 \par
00099      wifi_init_config_t wifi_init_cfg = WIFI_INIT_CONFIG_DEFAULT();\par
00100      esp_wifi_init(&wifi_init_cfg);\par
00101 \par
00102 {\cf21     #ifdef JRC_WIFI_USE_RAM_STORAGE}\par
00103     esp_wifi_set_storage(WIFI_STORAGE_RAM);\par
00104 {\cf21     #endif}\par
00105 \par
00106     {\cf20 // Stage 2. Wi-Fi Configuration Phase:}\par
00107     esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_event_handler, NULL);\par
00108     esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, wifi_event_handler, NULL);\par
00109 \par
00110     wifi_sta_config_t wifi_sta_cfg = \{\};\par
00111 \par
00112     strcpy(({\cf18 char} *)wifi_sta_cfg.ssid, WIFI_SSID);\par
00113     strcpy(({\cf18 char} *)wifi_sta_cfg.password, WIFI_PASSWORD);\par
00114 \par
00115     wifi_config_t wifi_cfg = \{.sta = wifi_sta_cfg\};\par
00116 \par
00117     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\par
00118     ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_cfg));\par
00119 \par
00120 {\cf21     #ifdef JRC_WIFI_STA_CUSTOM_MAC}\par
00121     uint8_t customMac[] = JRC_WIFI_STA_CUSTOM_MAC;\par
00122     esp_wifi_set_mac(WIFI_IF_STA, customMac);\par
00123 {\cf21     #endif}\par
00124 \par
00125     {\cf20 // Stage 3. Wi-Fi Start Phase:}\par
00126     ESP_ERROR_CHECK(esp_wifi_start());\par
00127 \par
00128     {\cf19 return} ESP_OK;\par
00129 \}\par
00130 \par
00131 esp_err_t JRC_WiFi_AP_Info(wifi_ap_record_t *apinfo)\par
00132 \{\par
00133     wifi_ap_record_t ap_info;\par
00134 \par
00135     esp_wifi_sta_get_ap_info(&ap_info);\par
00136 \par
00137     {\cf19 if} (apinfo == NULL)\par
00138     \{\par
00139         ESP_LOGI(TAG, {\cf22 "SSID: %s"}, ap_info.ssid);\par
00140         ESP_LOGI(TAG, {\cf22 "RSSI: %d"}, ap_info.rssi);\par
00141         ESP_LOGI(TAG, {\cf22 "BSSID: %02x:%02x:%02x:%02x:%02x:%02x"},\par
00142                  ap_info.bssid[0], ap_info.bssid[1], ap_info.bssid[2],\par
00143                  ap_info.bssid[3], ap_info.bssid[4], ap_info.bssid[5]);\par
00144         ESP_LOGI(TAG, {\cf22 "Channel: %d"}, ap_info.primary);\par
00145     \}\par
00146     {\cf19 else}\par
00147     \{\par
00148         memcpy(apinfo, &ap_info, {\cf17 sizeof}(wifi_ap_record_t));\par
00149     \}\par
00150 \par
00151     {\cf19 return} ESP_OK;\par
00152 \}\par
00153 \par
00154 esp_err_t JRC_WiFi_STA_MAC_Address({\cf18 char} *mac)\par
00155 \{\par
00156     uint8_t mac_address[6];\par
00157     esp_wifi_get_mac(ESP_IF_WIFI_STA, mac_address);\par
00158 \par
00159     {\cf19 if} (mac == NULL)\par
00160     \{\par
00161         ESP_LOGI(TAG, {\cf22 "Station MAC Address: %02x:%02x:%02x:%02x:%02x:%02x"},\par
00162                  mac_address[0], mac_address[1], mac_address[2],\par
00163                  mac_address[3], mac_address[4], mac_address[5]);\par
00164     \}\par
00165     {\cf19 else}\par
00166     \{\par
00167         sprintf(mac, {\cf22 "%02x:%02x:%02x:%02x:%02x:%02x%c"}, mac_address[0], mac_address[1], mac_address[2],\par
00168                 mac_address[3], mac_address[4], mac_address[5], {\cf23 '\\0'});\par
00169     \}\par
00170     {\cf19 return} ESP_OK;\par
00171 \}\par
00172 \par
00173 esp_err_t JRC_WiFi_STA_IP_Address({\cf18 char} *ipAdd)\par
00174 \{\par
00175     {\cf20 /* Obtain the default network interface */}\par
00176     esp_netif_t *netif = esp_netif_get_handle_from_ifkey({\cf22 "WIFI_STA_DEF"});\par
00177 \par
00178     {\cf20 /* Obtain the IP info from the network interface */}\par
00179 \par
00180     esp_netif_ip_info_t ip_info;\par
00181     esp_err_t ret = esp_netif_get_ip_info(netif, &ip_info);\par
00182     {\cf19 if} (ret == ESP_OK)\par
00183     \{\par
00184         {\cf19 if} (ipAdd == NULL)\par
00185         \{\par
00186             {\cf20 /* Show IP address */}\par
00187             {\cf18 char} buff[IP_ADDR_LENGTH];\par
00188             esp_ip4addr_ntoa(&ip_info.ip, buff, IP_ADDR_LENGTH);\par
00189             ESP_LOGI(TAG, {\cf22 "IP Address: %s"}, buff);\par
00190         \}\par
00191         {\cf19 else}\par
00192         \{\par
00193             esp_ip4addr_ntoa(&ip_info.ip, ipAdd, IP_ADDR_LENGTH);\par
00194         \}\par
00195     \}\par
00196 \par
00197     {\cf19 return} ret;\par
00198 \}\par
00199 \par
00200 esp_err_t JRC_WiFi_STA_Subnet_Mask({\cf18 char} *snMask)\par
00201 \{\par
00202     {\cf20 /* Obtain the default network interface */}\par
00203     esp_netif_t *netif = esp_netif_get_handle_from_ifkey({\cf22 "WIFI_STA_DEF"});\par
00204 \par
00205     {\cf20 /* Obtain the IP info from the network interface */}\par
00206 \par
00207     esp_netif_ip_info_t ip_info;\par
00208     esp_err_t ret = esp_netif_get_ip_info(netif, &ip_info);\par
00209     {\cf19 if} (ret == ESP_OK)\par
00210     \{\par
00211         {\cf19 if} (snMask == NULL)\par
00212         \{\par
00213             {\cf20 /* Show Subnet Mask */}\par
00214             {\cf18 char} buff[IP_ADDR_LENGTH];\par
00215             esp_ip4addr_ntoa(&ip_info.netmask, buff, IP_ADDR_LENGTH);\par
00216             ESP_LOGI(TAG, {\cf22 "Subnet Mask: %s"}, buff);\par
00217         \}\par
00218         {\cf19 else}\par
00219         \{\par
00220             esp_ip4addr_ntoa(&ip_info.netmask, snMask, IP_ADDR_LENGTH);\par
00221         \}\par
00222     \}\par
00223 \par
00224     {\cf19 return} ret;\par
00225 \}\par
00226 \par
00227 esp_err_t JRC_WiFi_STA_Gateway({\cf18 char} *gateWay)\par
00228 \{\par
00229     {\cf20 /* Obtain the default network interface */}\par
00230     esp_netif_t *netif = esp_netif_get_handle_from_ifkey({\cf22 "WIFI_STA_DEF"});\par
00231 \par
00232     {\cf20 /* Obtain the IP info from the network interface */}\par
00233 \par
00234     esp_netif_ip_info_t ip_info;\par
00235     esp_err_t ret = esp_netif_get_ip_info(netif, &ip_info);\par
00236     {\cf19 if} (ret == ESP_OK)\par
00237     \{\par
00238         {\cf19 if} (gateWay == NULL)\par
00239         \{\par
00240             {\cf20 /* Show Gateway */}\par
00241             {\cf18 char} buff[IP_ADDR_LENGTH];\par
00242             esp_ip4addr_ntoa(&ip_info.gw, buff, IP_ADDR_LENGTH);\par
00243             ESP_LOGI(TAG, {\cf22 "Gateway: %s"}, buff);\par
00244         \}\par
00245         {\cf19 else}\par
00246         \{\par
00247             esp_ip4addr_ntoa(&ip_info.gw, gateWay, IP_ADDR_LENGTH);\par
00248         \}\par
00249     \}\par
00250 \par
00251     {\cf19 return} ret;\par
00252 \}\par
00253 \par
00254 JRC_WiFi_Status_t JRC_WiFi_Get_Status()\par
00255 \{\par
00256     {\cf19 return} WiFi_Status;\par
00257 \}\par
00258 \par
00259 esp_err_t JRC_WiFi_Stop()\par
00260 \{\par
00261     esp_wifi_disconnect();\par
00262     esp_wifi_stop();\par
00263     esp_wifi_deinit();\par
00264 \par
00265     esp_netif_t *netif_sta = esp_netif_get_handle_from_ifkey({\cf22 "WIFI_STA_DEF"});\par
00266     {\cf19 if} (netif_sta != NULL) \{\par
00267         esp_netif_destroy(netif_sta);\par
00268     \}\par
00269 \par
00270     esp_netif_t *netif_ap = esp_netif_get_handle_from_ifkey({\cf22 "WIFI_AP_DEF"});\par
00271     {\cf19 if} (netif_ap != NULL) \{\par
00272         esp_netif_destroy(netif_ap);\par
00273     \}\par
00274 \par
00275     esp_event_handler_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_event_handler);\par
00276     esp_event_handler_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, wifi_event_handler);\par
00277 \par
00278     WiFi_Status = JRC_WIFI_NOT_STARTED;\par
00279     {\cf19 return} ESP_OK;\par
00280 \}\par
00281 \par
00282 esp_err_t JRC_WiFi_Begin_AP()\par
00283 \{\par
00284     nvs_flash_init();\par
00285 \par
00286     {\cf19 if} (JRC_WiFi_Get_Status() != JRC_WIFI_NOT_STARTED)\par
00287     \{\par
00288         ESP_LOGW(TAG, {\cf22 "Stop previously initialized WiFi..."});\par
00289         JRC_WiFi_Stop();\par
00290         ESP_LOGW(TAG, {\cf22 "WiFi stopped. Init again..."});\par
00291     \}\par
00292 \par
00293 \par
00294     {\cf20 // Stage 1. Wi-Fi/LwIP Init Phase:}\par
00295 \par
00296     esp_netif_init();\par
00297     esp_event_loop_create_default();\par
00298     esp_netif_create_default_wifi_ap();\par
00299 \par
00300     wifi_init_config_t wifi_init_cfg = WIFI_INIT_CONFIG_DEFAULT();\par
00301     esp_wifi_init(&wifi_init_cfg);\par
00302 \par
00303 {\cf21     #ifdef JRC_WIFI_USE_RAM_STORAGE}\par
00304     esp_wifi_set_storage(WIFI_STORAGE_RAM);\par
00305 {\cf21     #endif}\par
00306 \par
00307     {\cf20 // Stage 2. Wi-Fi Configuration Phase:}\par
00308     ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &wifi_event_handler, NULL));\par
00309     wifi_config_t wifi_ap_config = \{\par
00310         .ap = \{\par
00311             .ssid_len = strlen(WIFI_AP_SSID),\par
00312             .channel = 1,\par
00313             .max_connection = 4,\par
00314             .authmode = WIFI_AUTH_WPA2_PSK,\par
00315             .pmf_cfg = \{\par
00316                 .required = {\cf17 false},\par
00317             \},\par
00318         \},\par
00319     \};\par
00320 \par
00321     strcpy(({\cf18 char} *)wifi_ap_config.ap.ssid, WIFI_AP_SSID);\par
00322     strcpy(({\cf18 char} *)wifi_ap_config.ap.password, WIFI_AP_PASSWORD);\par
00323 \par
00324     {\cf19 if} (strlen(WIFI_AP_PASSWORD) == 0)\par
00325     \{\par
00326         wifi_ap_config.ap.authmode = WIFI_AUTH_OPEN;\par
00327     \}\par
00328 \par
00329     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\par
00330     ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &wifi_ap_config));\par
00331 \par
00332 {\cf21     #ifdef JRC_WIFI_AP_CUSTOM_MAC}\par
00333     uint8_t customMac[] = JRC_WIFI_AP_CUSTOM_MAC;\par
00334     esp_wifi_set_mac(WIFI_IF_AP, customMac);\par
00335 {\cf21     #endif}\par
00336 \par
00337     {\cf20 // Stage 3. Wi-Fi Start Phase:}\par
00338     ESP_ERROR_CHECK(esp_wifi_start());\par
00339 \par
00340     {\cf19 return} ESP_OK;\par
00341 \}\par
00342 \par
00343 esp_err_t JRC_WiFi_Begin_STA_AP()\par
00344 \{\par
00345     nvs_flash_init();\par
00346 \par
00347     {\cf19 if} (JRC_WiFi_Get_Status() != JRC_WIFI_NOT_STARTED)\par
00348     \{\par
00349         ESP_LOGW(TAG, {\cf22 "Stop previously initialized WiFi..."});\par
00350         JRC_WiFi_Stop();\par
00351         ESP_LOGW(TAG, {\cf22 "WiFi stopped. Init again..."});\par
00352     \}\par
00353 \par
00354     {\cf20 // Stage 1. Wi-Fi/LwIP Init Phase:}\par
00355 \par
00356     esp_netif_init();\par
00357     esp_event_loop_create_default();\par
00358     esp_netif_create_default_wifi_sta();\par
00359     esp_netif_create_default_wifi_ap();\par
00360 \par
00361     wifi_init_config_t wifi_init_cfg = WIFI_INIT_CONFIG_DEFAULT();\par
00362     esp_wifi_init(&wifi_init_cfg);\par
00363 \par
00364 {\cf21     #ifdef JRC_WIFI_USE_RAM_STORAGE}\par
00365     esp_wifi_set_storage(WIFI_STORAGE_RAM);\par
00366 {\cf21     #endif}\par
00367 \par
00368     {\cf20 // Stage 2. Wi-Fi Configuration Phase:}\par
00369 \par
00370     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_APSTA));\par
00371     esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_event_handler, NULL);\par
00372     esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, wifi_event_handler, NULL);\par
00373 \par
00374     wifi_sta_config_t wifi_sta_cfg = \{\};\par
00375 \par
00376     strcpy(({\cf18 char} *)wifi_sta_cfg.ssid, WIFI_SSID);\par
00377     strcpy(({\cf18 char} *)wifi_sta_cfg.password, WIFI_PASSWORD);\par
00378 \par
00379     wifi_ap_config_t wifi_ap_cfg = \{\par
00380         .ssid_len = strlen(WIFI_AP_SSID),\par
00381         .channel = 0,\par
00382         .max_connection = 4,\par
00383         .authmode = WIFI_AUTH_WPA2_PSK,\par
00384         .pmf_cfg = \{\par
00385             .required = {\cf17 false},\par
00386         \},\par
00387     \};\par
00388 \par
00389     strcpy(({\cf18 char} *)wifi_ap_cfg.ssid, WIFI_AP_SSID);\par
00390     strcpy(({\cf18 char} *)wifi_ap_cfg.password, WIFI_AP_PASSWORD);\par
00391 \par
00392     {\cf19 if} (strlen(WIFI_AP_PASSWORD) == 0)\par
00393     \{\par
00394         wifi_ap_cfg.authmode = WIFI_AUTH_OPEN;\par
00395     \}\par
00396 \par
00397     wifi_config_t wifi_sta_config = \{.sta = wifi_sta_cfg\};\par
00398     ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_sta_config));\par
00399     \par
00400 {\cf21     #ifdef JRC_WIFI_STA_CUSTOM_MAC}\par
00401     uint8_t customMacSta[] = JRC_WIFI_STA_CUSTOM_MAC;\par
00402     esp_wifi_set_mac(WIFI_IF_STA, customMacSta);\par
00403 {\cf21     #endif}\par
00404 \par
00405     wifi_config_t wifi_ap_config = \{.ap = wifi_ap_cfg\};\par
00406     ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &wifi_ap_config));\par
00407 \par
00408 {\cf21     #ifdef JRC_WIFI_AP_CUSTOM_MAC}\par
00409     uint8_t customMacAP[] = JRC_WIFI_AP_CUSTOM_MAC;\par
00410     esp_wifi_set_mac(WIFI_IF_AP, customMacAP);\par
00411 {\cf21     #endif}\par
00412 \par
00413     {\cf20 // Stage 3. Wi-Fi Start Phase:}\par
00414     ESP_ERROR_CHECK(esp_wifi_start());\par
00415 \par
00416     {\cf19 return} ESP_OK;\par
00417 \}\par
00418 \par
00419 {\cf17 static} {\cf18 void} print_auth_mode({\cf18 int} authmode)\par
00420 \{\par
00421     {\cf19 switch} (authmode)\par
00422     \{\par
00423     {\cf19 case} WIFI_AUTH_OPEN:\par
00424         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_OPEN"});\par
00425         {\cf19 break};\par
00426     {\cf19 case} WIFI_AUTH_OWE:\par
00427         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_OWE"});\par
00428         {\cf19 break};\par
00429     {\cf19 case} WIFI_AUTH_WEP:\par
00430         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WEP"});\par
00431         {\cf19 break};\par
00432     {\cf19 case} WIFI_AUTH_WPA_PSK:\par
00433         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA_PSK"});\par
00434         {\cf19 break};\par
00435     {\cf19 case} WIFI_AUTH_WPA2_PSK:\par
00436         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA2_PSK"});\par
00437         {\cf19 break};\par
00438     {\cf19 case} WIFI_AUTH_WPA_WPA2_PSK:\par
00439         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA_WPA2_PSK"});\par
00440         {\cf19 break};\par
00441     {\cf19 case} WIFI_AUTH_WPA2_ENTERPRISE:\par
00442         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA2_ENTERPRISE"});\par
00443         {\cf19 break};\par
00444     {\cf19 case} WIFI_AUTH_WPA3_PSK:\par
00445         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA3_PSK"});\par
00446         {\cf19 break};\par
00447     {\cf19 case} WIFI_AUTH_WPA2_WPA3_PSK:\par
00448         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_WPA2_WPA3_PSK"});\par
00449         {\cf19 break};\par
00450     {\cf19 default}:\par
00451         ESP_LOGI(TAG, {\cf22 "Authmode \\tWIFI_AUTH_UNKNOWN"});\par
00452         {\cf19 break};\par
00453     \}\par
00454 \}\par
00455 \par
00456 {\cf17 static} {\cf18 void} print_cipher_type({\cf18 int} pairwise_cipher, {\cf18 int} group_cipher)\par
00457 \{\par
00458     {\cf19 switch} (pairwise_cipher)\par
00459     \{\par
00460     {\cf19 case} WIFI_CIPHER_TYPE_NONE:\par
00461         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_NONE"});\par
00462         {\cf19 break};\par
00463     {\cf19 case} WIFI_CIPHER_TYPE_WEP40:\par
00464         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_WEP40"});\par
00465         {\cf19 break};\par
00466     {\cf19 case} WIFI_CIPHER_TYPE_WEP104:\par
00467         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_WEP104"});\par
00468         {\cf19 break};\par
00469     {\cf19 case} WIFI_CIPHER_TYPE_TKIP:\par
00470         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_TKIP"});\par
00471         {\cf19 break};\par
00472     {\cf19 case} WIFI_CIPHER_TYPE_CCMP:\par
00473         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_CCMP"});\par
00474         {\cf19 break};\par
00475     {\cf19 case} WIFI_CIPHER_TYPE_TKIP_CCMP:\par
00476         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_TKIP_CCMP"});\par
00477         {\cf19 break};\par
00478     {\cf19 default}:\par
00479         ESP_LOGI(TAG, {\cf22 "Pairwise Cipher \\tWIFI_CIPHER_TYPE_UNKNOWN"});\par
00480         {\cf19 break};\par
00481     \}\par
00482 \par
00483     {\cf19 switch} (group_cipher)\par
00484     \{\par
00485     {\cf19 case} WIFI_CIPHER_TYPE_NONE:\par
00486         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_NONE"});\par
00487         {\cf19 break};\par
00488     {\cf19 case} WIFI_CIPHER_TYPE_WEP40:\par
00489         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_WEP40"});\par
00490         {\cf19 break};\par
00491     {\cf19 case} WIFI_CIPHER_TYPE_WEP104:\par
00492         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_WEP104"});\par
00493         {\cf19 break};\par
00494     {\cf19 case} WIFI_CIPHER_TYPE_TKIP:\par
00495         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_TKIP"});\par
00496         {\cf19 break};\par
00497     {\cf19 case} WIFI_CIPHER_TYPE_CCMP:\par
00498         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_CCMP"});\par
00499         {\cf19 break};\par
00500     {\cf19 case} WIFI_CIPHER_TYPE_TKIP_CCMP:\par
00501         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_TKIP_CCMP"});\par
00502         {\cf19 break};\par
00503     {\cf19 default}:\par
00504         ESP_LOGI(TAG, {\cf22 "Group Cipher \\tWIFI_CIPHER_TYPE_UNKNOWN"});\par
00505         {\cf19 break};\par
00506     \}\par
00507 \}\par
00508 \par
00509 esp_err_t JRC_WiFi_Scan({\cf18 void} *ap_found_info)\par
00510 \{\par
00511     {\cf19 if} (WiFi_Status == JRC_WIFI_NOT_STARTED)\par
00512     \{\par
00513         nvs_flash_init();\par
00514         ESP_ERROR_CHECK(esp_netif_init());\par
00515         ESP_ERROR_CHECK(esp_event_loop_create_default());\par
00516         esp_netif_t *sta_netif = esp_netif_create_default_wifi_sta();\par
00517         assert(sta_netif);\par
00518 \par
00519         wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\par
00520         ESP_ERROR_CHECK(esp_wifi_init(&cfg));\par
00521 \par
00522 {\cf21         #ifdef JRC_WIFI_USE_RAM_STORAGE}\par
00523         esp_wifi_set_storage(WIFI_STORAGE_RAM);\par
00524 {\cf21         #endif}\par
00525 \par
00526         ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\par
00527 \par
00528 {\cf21         #ifdef JRC_WIFI_STA_CUSTOM_MAC}\par
00529         uint8_t customMac[] = JRC_WIFI_STA_CUSTOM_MAC;\par
00530         esp_wifi_set_mac(WIFI_IF_STA, customMac);\par
00531 {\cf21         #endif}\par
00532 \par
00533         ESP_ERROR_CHECK(esp_wifi_start());\par
00534         WiFi_Status = JRC_WIFI_STARTED;\par
00535     \}\par
00536 \par
00537     uint16_t number = DEFAULT_SCAN_LIST_SIZE;\par
00538     wifi_ap_record_t ap_info[DEFAULT_SCAN_LIST_SIZE];\par
00539     uint16_t ap_count = 0;\par
00540     memset(ap_info, 0, {\cf17 sizeof}(ap_info));\par
00541 \par
00542     esp_wifi_scan_start(NULL, {\cf17 true});\par
00543     ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&number, ap_info));\par
00544     ESP_ERROR_CHECK(esp_wifi_scan_get_ap_num(&ap_count));\par
00545 \par
00546     {\cf19 if} (ap_found_info == NULL)\par
00547     \{\par
00548         ESP_LOGI(TAG, {\cf22 "Total APs scanned = %u"}, ap_count);\par
00549         {\cf19 for} ({\cf18 int} i = 0; (i < DEFAULT_SCAN_LIST_SIZE) && (i < ap_count); i++)\par
00550         \{\par
00551             ESP_LOGI(TAG, {\cf22 "SSID \\t\\t%s"}, ap_info[i].ssid);\par
00552             ESP_LOGI(TAG, {\cf22 "RSSI \\t\\t%d"}, ap_info[i].rssi);\par
00553             print_auth_mode(ap_info[i].authmode);\par
00554             {\cf19 if} (ap_info[i].authmode != WIFI_AUTH_WEP)\par
00555             \{\par
00556                 print_cipher_type(ap_info[i].pairwise_cipher, ap_info[i].group_cipher);\par
00557             \}\par
00558             ESP_LOGI(TAG, {\cf22 "Channel \\t\\t%d\\n"}, ap_info[i].primary);\par
00559         \}\par
00560     \}\par
00561     {\cf19 else}\par
00562     \{\par
00563         {\cf19 for} ({\cf18 int} i = 0; (i < DEFAULT_SCAN_LIST_SIZE) && (i < ap_count); i++)\par
00564         \{\par
00565             ((wifi_ap_record_t *)ap_found_info)[i] = ap_info[i];\par
00566         \}\par
00567     \}\par
00568     {\cf19 return} ESP_OK;\par
00569 \}\par
00570 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
JRC_WiFi.h File Reference\par \pard\plain 
{\tc\tcl2 \v JRC_WiFi.h}
{\xe \v JRC_WiFi.h}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "esp_err.h"}\par
{\f2 #include "esp_wifi.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_USE_RAM_STORAGE}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define this macro for WiFi storage of data in RAM, if not defined (comment definition), the storage will be done in NVS by default. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_NOT_STARTED}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_CONNECTED}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_STARTED}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_GOT_IP}\~ 3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_DISCONNECTED}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_AP_STARTED}\~ 5\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DEFAULT_SCAN_LIST_SIZE}\~ 10\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAC_ADDR_LENGTH}\~ 18\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b IP_ADDR_LENGTH}\~ 16\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef int {\b JRC_WiFi_Status_t}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These functions perfom the task needed to establish connection to the AP : }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin_STA_AP} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Begin_AP} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the WiFi device as an AP in SoftAP Mode: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Stop} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect from AP in Station Mode, stops WiFi driver and free resources: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b JRC_WiFi_Status_t} {\b JRC_WiFi_Get_Status} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the status of the WiFi: The status is a typedef, that is coded in macros, and can be one of the following: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_AP_Info} (wifi_ap_record_t *apinfo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the information of the AP the device has been connected: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_MAC_Address} (char *mac)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the MAC Address of the ESP32 in Station Mode : It works printing MAC address in the serial console (pass {\f2 NULL}  as parameter), or saving the MAC address in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_IP_Address} (char *ipAdd)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the IP address assigned to the ESP32 by the AP : Prints the IP address to the console, (pass {\f2 NULL}  as parameter), or saving the IP address in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_Subnet_Mask} (char *snMask)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Subnet Mask in Station Mode : Prints the Subnet Mask to the console, (pass {\f2 NULL}  as parameter), or saving the Subnet Mask in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_STA_Gateway} (char *gateWay)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Gateway in Station Mode : Prints the Gateway to the console, (pass {\f2 NULL}  as parameter), or saving the Gateway in a char array passed as a parameter. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
esp_err_t {\b JRC_WiFi_Scan} (void *ap_found_info)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Perform a scan for available AP's: It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the array passed as a parameter. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DEFAULT_SCAN_LIST_SIZE\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:DEFAULT_SCAN_LIST_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEFAULT_SCAN_LIST_SIZE\~ 10}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v IP_ADDR_LENGTH\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:IP_ADDR_LENGTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define IP_ADDR_LENGTH\~ 16}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_AP_STARTED\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_AP_STARTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_AP_STARTED\~ 5}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_CONNECTED\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_CONNECTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_CONNECTED\~ 1}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_DISCONNECTED\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_DISCONNECTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_DISCONNECTED\~ 4}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_GOT_IP\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_GOT_IP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_GOT_IP\~ 3}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_NOT_STARTED\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_NOT_STARTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_NOT_STARTED\~ 0}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_STARTED\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_STARTED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_STARTED\~ 2}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v JRC_WIFI_USE_RAM_STORAGE\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WIFI_USE_RAM_STORAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_USE_RAM_STORAGE}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define this macro for WiFi storage of data in RAM, if not defined (comment definition), the storage will be done in NVS by default. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
If NVS is not desired for WiFi, then disable NVS for WiFi via menuconfig. \par
}}}{
Definition at line {\b 18} of file {\b JRC_WiFi.h}.}\par
}
{\xe \v MAC_ADDR_LENGTH\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:MAC_ADDR_LENGTH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAC_ADDR_LENGTH\~ 18}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b JRC_WiFi.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v JRC_WiFi_Status_t\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Status_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef int {\b JRC_WiFi_Status_t}}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b JRC_WiFi.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v JRC_WiFi_AP_Info\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_AP_Info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_AP_Info (wifi_ap_record_t *  {\i apinfo})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the information of the AP the device has been connected: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the structure passed as a parameter.\par
Call of function requires a pointer to a {\f2 wifi_ap_record_t}  struct. ie: {\f2 JRC_WiFi_AP_Info(&ap_info);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i apinfo} \cell }{Pointer to a struct declared as {\f2 wifi_ap_record_t} . ie: {\f2 wifi_ap_record_t ap_info;}  If this parameter is {\f2 NULL} , the output result will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 131} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin ()}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These functions perfom the task needed to establish connection to the AP : }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b JRC_WiFi_Begin()}; sets up the device in Station Mode, The {\b JRC_WiFi_Begin_STA_AP()}; sets up the device in Station + SoftAP Mode.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The SSID and PASSWORD for the Station Mode and for the SoftAP Mode, are configured in the file {\b secrets.h}, under the corresponding macros.\par
If the macros {\f2 JRC_WIFI_STA_CUSTOM_MAC}  and/or {\f2 JRC_WIFI_AP_CUSTOM_MAC}  are defined, custom mac addresses will be used, if these macros are not defined, the factory mac addresses will be used instead. Edit the {\b secrets.h} file for the desired custom macs, or comment the macro definitions if custom macs are not desired.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 81} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin_AP\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Begin_AP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin_AP ()}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the WiFi device as an AP in SoftAP Mode: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The SSID and PASSWORD for the Station Mode and for the SoftAP Mode, are configured in the file {\b secrets.h}, under the corresponding macros.\par
If the macro {\f2 JRC_WIFI_AP_CUSTOM_MAC}  is defined, custom mac address will be used, if this macro is not defined, the factory AP mac address will be used instead. Edit the {\b secrets.h} file for the desired custom mac, or comment the macro definition if custom mac is not desired.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 282} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Begin_STA_AP\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Begin_STA_AP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Begin_STA_AP ()}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 343} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Get_Status\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Get_Status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b JRC_WiFi_Status_t} JRC_WiFi_Get_Status ()}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the status of the WiFi: The status is a typedef, that is coded in macros, and can be one of the following: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   `JRC_WIFI_NOT_STARTED`\par
  `JRC_WIFI_CONNECTED` \par
  `JRC_WIFI_STARTED` \par
  `JRC_WIFI_GOT_IP` \par
  `JRC_WIFI_DISCONNECTED` \par
}
 \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 254} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Scan\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Scan}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Scan (void *  {\i ap_found_info})}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Perform a scan for available AP's: It works printing ap's info in the serial console (pass {\f2 NULL}  as parameter), or saving the ap's info in the array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ap_found_info} \cell }{array name declared as {\f2 wifi_ap_record_t} .\cell }
{\row }
}
ie: {\f2 wifi_ap_record_t ap_info[DEFAULT_SCAN_LIST_SIZE];}  {\f2 JRC_WiFi_Scan(ap_info);} \par
If this parameter is {\f2 NULL} , the output result will be printed in the serial console.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 509} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_Gateway\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_STA_Gateway}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_Gateway (char *  {\i gateWay})}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Gateway in Station Mode : Prints the Gateway to the console, (pass {\f2 NULL}  as parameter), or saving the Gateway in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char gateWay[IP_ADDR_LENGTH];}  JRC_ {\f2 WiFi_STA_Gateway(gateWay);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i gateWay} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the Gateway will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 227} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_IP_Address\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_STA_IP_Address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_IP_Address (char *  {\i ipAdd})}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the IP address assigned to the ESP32 by the AP : Prints the IP address to the console, (pass {\f2 NULL}  as parameter), or saving the IP address in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char ipAdd[IP_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_IP_Address(ipAdd);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ipAdd} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the IP address will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 173} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_MAC_Address\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_STA_MAC_Address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_MAC_Address (char *  {\i mac})}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the MAC Address of the ESP32 in Station Mode : It works printing MAC address in the serial console (pass {\f2 NULL}  as parameter), or saving the MAC address in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 18 bytes at minimum. Use the macro: {\f2 MAC_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char macAddress[MAC_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_MAC_Address(macAddress);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mac} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the MAC address will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 154} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_STA_Subnet_Mask\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_STA_Subnet_Mask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_STA_Subnet_Mask (char *  {\i snMask})}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the Subnet Mask in Station Mode : Prints the Subnet Mask to the console, (pass {\f2 NULL}  as parameter), or saving the Subnet Mask in a char array passed as a parameter. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call of function requires a char array name, whose size must be 16 bytes at minimum. Use the macro: {\f2 IP_ADDR_LENGTH}  to declare the char array.\par
ie: {\f2 char snMask[IP_ADDR_LENGTH];}  {\f2 JRC_WiFi_STA_Subnet_Mask(snMask);} \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i snMask} \cell }{Name of the previous declared char array. If this parameter is {\f2 NULL} , the Subnet Mask will be printed in the serial console.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  \par
}}}{
Definition at line {\b 200} of file {\b JRC_WiFi.c}.}\par
}
{\xe \v JRC_WiFi_Stop\:JRC_WiFi.h}
{\xe \v JRC_WiFi.h\:JRC_WiFi_Stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
esp_err_t JRC_WiFi_Stop ()}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect from AP in Station Mode, stops WiFi driver and free resources: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\f2 ESP_OK}  on success \par
}}}{
Definition at line {\b 259} of file {\b JRC_WiFi.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
JRC_WiFi.h\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20 ______________________________________________________________________________________                                }\par
00003 {\cf20                                 JRC_WiFi Library V1.0}\par
00004 {\cf20                                 by:  Javier Ruzzante C}\par
00005 {\cf20                                    (March 2023)}\par
00006 {\cf20 ______________________________________________________________________________________}\par
00007 {\cf20 */}\par
00008  \par
00009 {\cf21 #ifndef _JRC_WIFI}\par
00010 {\cf21 #define _JRC_WIFI}\par
00011 \par
00018 {\cf21 #define JRC_WIFI_USE_RAM_STORAGE}\par
00019  \par
00020 {\cf21 #define JRC_WIFI_NOT_STARTED    0}\par
00021 {\cf21 #define JRC_WIFI_CONNECTED      1}\par
00022 {\cf21 #define JRC_WIFI_STARTED        2}\par
00023 {\cf21 #define JRC_WIFI_GOT_IP         3}\par
00024 {\cf21 #define JRC_WIFI_DISCONNECTED   4}\par
00025 {\cf21 #define JRC_WIFI_AP_STARTED     5}\par
00026  \par
00027 {\cf21 #define DEFAULT_SCAN_LIST_SIZE 10}\par
00028 {\cf21 #define MAC_ADDR_LENGTH 18}\par
00029 {\cf21 #define IP_ADDR_LENGTH 16}\par
00030  \par
00031 {\cf17 typedef} {\cf18 int} JRC_WiFi_Status_t;\par
00032  \par
00033 {\cf21 #include "esp_err.h"}\par
00034 {\cf21 #include "esp_wifi.h"}\par
00035 \par
00036 \par
00054 esp_err_t         JRC_WiFi_Begin();\par
00055 esp_err_t         JRC_WiFi_Begin_STA_AP();\par
00056 {\cf20 // ______________________________________________________________________________________   }\par
00057  \par
00058 \par
00072 esp_err_t         JRC_WiFi_Begin_AP();\par
00073 {\cf20 // ______________________________________________________________________________________   }\par
00074  \par
00075  \par
00076 \par
00082 esp_err_t         JRC_WiFi_Stop();\par
00083 {\cf20 // ______________________________________________________________________________________   }\par
00084  \par
00085  \par
00098 JRC_WiFi_Status_t JRC_WiFi_Get_Status();\par
00099 {\cf20 // ______________________________________________________________________________________   }\par
00100  \par
00101  \par
00102  \par
00116 esp_err_t         JRC_WiFi_AP_Info(wifi_ap_record_t *apinfo);\par
00117 {\cf20 // ______________________________________________________________________________________   }\par
00118  \par
00119  \par
00120 \par
00137 esp_err_t         JRC_WiFi_STA_MAC_Address({\cf18 char} *mac);\par
00138 {\cf20 // ______________________________________________________________________________________   }\par
00139  \par
00140  \par
00141  \par
00142 \par
00158 esp_err_t         JRC_WiFi_STA_IP_Address({\cf18 char} *ipAdd);\par
00159 {\cf20 // ______________________________________________________________________________________   }\par
00160  \par
00161  \par
00162  \par
00163 \par
00180 esp_err_t         JRC_WiFi_STA_Subnet_Mask({\cf18 char} *snMask);\par
00181 {\cf20 // ______________________________________________________________________________________   }\par
00182  \par
00183  \par
00184  \par
00200 esp_err_t         JRC_WiFi_STA_Gateway({\cf18 char} *gateWay);\par
00201 {\cf20 // ______________________________________________________________________________________   }\par
00202  \par
00203 \par
00204 \par
00220 esp_err_t         JRC_WiFi_Scan({\cf18 void} *ap_found_info);\par
00221 {\cf20 // ______________________________________________________________________________________   }\par
00222  \par
00223 {\cf20 //#include  "JRC_WiFi.c"}\par
00224 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
secrets.h File Reference\par \pard\plain 
{\tc\tcl2 \v secrets.h}
{\xe \v secrets.h}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WIFI_SSID}\~ "Fibranet 991820"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi credentials information: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WIFI_PASSWORD}\~ "wtj5T3hm"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WIFI_AP_SSID}\~ "ESP32 JRC Tech"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
SoftAP credentials information: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WIFI_AP_PASSWORD}\~ ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_STA_CUSTOM_MAC}\~ \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x66\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Custom mac definitions: }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b JRC_WIFI_AP_CUSTOM_MAC}\~ \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x67\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v JRC_WIFI_AP_CUSTOM_MAC\:secrets.h}
{\xe \v secrets.h\:JRC_WIFI_AP_CUSTOM_MAC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_AP_CUSTOM_MAC\~ \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x67\}}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b secrets.h}.}\par
}
{\xe \v JRC_WIFI_STA_CUSTOM_MAC\:secrets.h}
{\xe \v secrets.h\:JRC_WIFI_STA_CUSTOM_MAC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define JRC_WIFI_STA_CUSTOM_MAC\~ \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x66\}}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Custom mac definitions: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Edit the mac address with the desired custom mac for station or ap.\par
Comment these lines for use factory station mac and/or factory ap mac instead. \par
}{
Definition at line {\b 39} of file {\b secrets.h}.}\par
}
{\xe \v WIFI_AP_PASSWORD\:secrets.h}
{\xe \v secrets.h\:WIFI_AP_PASSWORD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WIFI_AP_PASSWORD\~ ""}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b secrets.h}.}\par
}
{\xe \v WIFI_AP_SSID\:secrets.h}
{\xe \v secrets.h\:WIFI_AP_SSID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WIFI_AP_SSID\~ "ESP32 JRC Tech"}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
SoftAP credentials information: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Edit with the desired credentials for the softAP mode. \par
}{
Definition at line {\b 27} of file {\b secrets.h}.}\par
}
{\xe \v WIFI_PASSWORD\:secrets.h}
{\xe \v secrets.h\:WIFI_PASSWORD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WIFI_PASSWORD\~ "wtj5T3hm"}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b secrets.h}.}\par
}
{\xe \v WIFI_SSID\:secrets.h}
{\xe \v secrets.h\:WIFI_SSID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WIFI_SSID\~ "Fibranet 991820"}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi credentials information: }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Edit with the target AP information. \par
}{
Definition at line {\b 18} of file {\b secrets.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
secrets.h\par \pard\plain 
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20 ______________________________________________________________________________________                                }\par
00003 {\cf20                                 JRC_WiFi Library V1.0}\par
00004 {\cf20                                 by:  Javier Ruzzante C}\par
00005 {\cf20                                    (March 2023)}\par
00006 {\cf20 ______________________________________________________________________________________}\par
00007 {\cf20 */}\par
00008 \par
00015 {\cf20 //#define WIFI_SSID "Flia Ruzzante G"}\par
00016 {\cf20 //#define WIFI_PASSWORD "n0pc-3xif-a4aa"}\par
00017 \par
00018 {\cf21 #define WIFI_SSID "Fibranet 991820"}\par
00019 {\cf21 #define WIFI_PASSWORD "wtj5T3hm"}\par
00020 \par
00027 {\cf21 #define WIFI_AP_SSID "ESP32 JRC Tech"}\par
00028 {\cf21 #define WIFI_AP_PASSWORD ""}\par
00029 \par
00039 {\cf21  #define JRC_WIFI_STA_CUSTOM_MAC \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x66\}}\par
00040 {\cf21  #define JRC_WIFI_AP_CUSTOM_MAC  \{0x32, 0xAE, 0xA4, 0x07, 0x0D, 0x67\}}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
